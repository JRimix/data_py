pip install watchdog pandas sqlalchemy logging

import os
import time
import logging
import pandas as pd
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from sqlalchemy import create_engine, Table, MetaData

# Configuration
WATCHED_DIRECTORY = '/path/to/watched/directory'
DATABASE_URL = 'sqlite:///mydatabase.db'  # Change to your database URL

# Set up logging
logging.basicConfig(filename='file_importer.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Database setup
engine = create_engine(DATABASE_URL)
metadata = MetaData()

# File processing function
def process_file(file_path):
    logging.info(f"Processing file: {file_path}")
    
    try:
        # Example: assuming the file is a CSV
        df = pd.read_csv(file_path)
        
        # Define table name, replace 'mytable' with your table name
        table_name = 'mytable'
        table = Table(table_name, metadata, autoload_with=engine)
        
        with engine.connect() as connection:
            df.to_sql(table_name, connection, if_exists='append', index=False)
        
        logging.info(f"Successfully imported {file_path} into database.")
    
    except Exception as e:
        logging.error(f"Failed to process file {file_path}: {e}")

# Event handler class
class FileEventHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            process_file(event.src_path)

# Main function to set up directory watcher
def main():
    event_handler = FileEventHandler()
    observer = Observer()
    observer.schedule(event_handler, path=WATCHED_DIRECTORY, recursive=False)
    observer.start()
    
    logging.info("Started watching directory for new files.")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == "__main__":
    main()
