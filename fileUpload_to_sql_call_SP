import os
import time
import logging
import pyodbc
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# Configuration
WATCHED_DIRECTORY = '/path/to/watched/directory'
DATABASE_CONNECTION_STRING = 'DRIVER={ODBC Driver 17 for SQL Server};SERVER=hostname;DATABASE=dbname;UID=username;PWD=password'

# Set up logging
logging.basicConfig(filename='file_importer.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Database setup
try:
    conn = pyodbc.connect(DATABASE_CONNECTION_STRING)
except Exception as e:
    logging.error(f"Failed to connect to database: {e}")
    raise

# File processing function
def process_file(file_path):
    logging.info(f"Processing file: {file_path}")

    if not os.path.isfile(file_path):
        logging.error(f"The path {file_path} is not a file.")
        return

    try:
        # Read the file content
        with open(file_path, 'rb') as file:
            file_content = file.read()
        
        # Extract the file name from the path
        file_name = os.path.basename(file_path)
        
        # Call stored procedure
        cursor = conn.cursor()
        try:
            cursor.execute("""
                EXEC InsertAndProcessFile ?, ?
                """, (file_name, file_content))
            conn.commit()
            logging.info(f"Successfully uploaded and processed {file_path}.")
        except Exception as e:
            logging.error(f"Database operation failed for {file_path}: {e}")
            conn.rollback()
    
    except IOError as e:
        logging.error(f"File I/O error for {file_path}: {e}")
    except Exception as e:
        logging.error(f"Failed to process file {file_path}: {e}")

# Event handler class
class FileEventHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            logging.info(f"Detected new file: {event.src_path}")
            process_file(event.src_path)

# Main function to set up directory watcher
def main():
    event_handler = FileEventHandler()
    observer = Observer()
    
    try:
        observer.schedule(event_handler, path=WATCHED_DIRECTORY, recursive=False)
        observer.start()
        logging.info("Started watching directory for new files.")
        
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("Stopping directory watcher.")
        observer.stop()
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
    finally:
        observer.join()
        conn.close()
        logging.info("Cleaned up and closed resources.")

if __name__ == "__main__":
    main()
